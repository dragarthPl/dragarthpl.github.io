{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/value-objects-dla-wezy","result":{"data":{"markdownRemark":{"id":"c631d222-414e-5d4c-ac20-5d7d920567d4","html":"<ul>\n<li><a href=\"#czym-sa-value-objects-i-jakie-maja-znaczenie-strategiczne\">Czym są Value Objects i jakie mają znaczenie strategiczne</a></li>\n<li><a href=\"#zysk-biznesowy\">Zysk biznesowy</a></li>\n<li><a href=\"#primitive-obsession\">Primitive Obsession</a></li>\n<li><a href=\"#immutable\">Immutable</a></li>\n<li><a href=\"#side-effect\">Side Effect</a></li>\n<li><a href=\"#comparasion\">Comparasion</a></li>\n<li><a href=\"#przyklad\">Przykład</a></li>\n</ul>\n<h2 id=\"czym-są-value-objects-i-jakie-mają-znaczenie-strategiczne\" style=\"position:relative;\"><a href=\"#czym-s%C4%85-value-objects-i-jakie-maj%C4%85-znaczenie-strategiczne\" aria-label=\"czym są value objects i jakie mają znaczenie strategiczne permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Czym są Value Objects i jakie mają znaczenie strategiczne</h2>\n<p>Jeśli miałbym wymienić najistotniejszą dla mnie cechę Value Object to było by to znaczenie biznesowe. I tak, prostym zmiennym nadajemy nowego więcej mówiącego znaczenia biznesowego. Dzięki czemu string np. przestaje być stringiem a jest nazwiskiem, flot/int lub inny zestaw cyfr staje się wartością pieniądza. To nie wszystko, bo przecież czy jeśli mamy pieniądze to czy suma dwóch “pieniędzy”, suma dwóch float da nam poprawny wynik ? Nie koniecznie, ponieważ jeśli nie weżniemy pod uwagę waluty, to ta suma już nie będzie sensowną, gdy sumujemy PLN z EUR. </p>\n<h2 id=\"zysk-biznesowy\" style=\"position:relative;\"><a href=\"#zysk-biznesowy\" aria-label=\"zysk biznesowy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zysk biznesowy</h2>\n<p>Weźmy dla przykładu 10.00 i zastanówmy się czym to jest. Hymmm … Ciężko wymyślić nie ? A jeśli powiemy że jest to 10.00 l, a w dodatku nazwiemy to\nBottleCapacity. Aha … więc jest to już czymś konkretniejszym - jest to pojemność butelki. Pojemność nie może być ujemna, więc będzie zawsze dodatnia. Więc możemy powiedzieć, że poprawne są tylko wartości większe od 0, to już daje nam jakiś obraz walidacji, lub zakresów biznesowych, które niesie ze sobą ten obiekt. </p>\n<h2 id=\"primitive-obsession\" style=\"position:relative;\"><a href=\"#primitive-obsession\" aria-label=\"primitive obsession permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive Obsession</h2>\n<p>Dokładnie tak jak wspomniałem wyżej. Tytułowy code smell, jakim jest primitive obsession to zjawisko nadużywania typów prostych do reprezentacji idei/konceptu domeny. Przykłady: używamy liczby całkowitej do reprezentowania kwoty pieniężnej zamiast obiektu Money - czyli struktury pieniężnej, albo stringa, aby prezentować wiadomość.</p>\n<h2 id=\"immutable\" style=\"position:relative;\"><a href=\"#immutable\" aria-label=\"immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Immutable</h2>\n<p>Niezmienność jest cechą, która opisuje Value Objects. Ta niezmienność VO, zapewnia nam gwarancje na poziomie kodu, że są to obiekty read-only. Jeśli zachodzi potrzeba zmiany wartości wyrażonej za pomocą VO, musimy tego dokonać przez utworzenie nowego VO.</p>\n<h2 id=\"side-effect\" style=\"position:relative;\"><a href=\"#side-effect\" aria-label=\"side effect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Side Effect</h2>\n<p>Chodzi o to aby uniknąć zmiany obiektu “na boku” np. po przez money.value = money.value + 3, zamiast tego chcemy mieć nowy byt immutable, czyli Money(money.value + 3, currency).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from decimal import Decimal\n\n\nclass Money:\n    value: Decimal\n    currency: str\n    \n    def __init__(self, value: Decimal, currency: str):\n        self.value = value\n        self.currency = currency\n    \n    def add(self, money: Money):\n        if self.currency == money.currency\n            return Money(self.value + money.value, money.currency)\n        raise ValidationError(\"Different currency\")</code></pre></div>\n<p>Czemu to takie ważne ? Przypuśćmy że mamy taka sytuację:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>> money = Money(Decimal(\"5\"), \"PLN\")\n\n>>> currency_conversion(money, \"USD\")\n7 USD\n\n>>> money.value\n7\n\n>>> money.currency\nUSD</code></pre></div>\n<p>Przykład pokazuje idealnie jak błędy w currency_conversion, są siane w głąb naszego kodu.</p>\n<h2 id=\"comparasion\" style=\"position:relative;\"><a href=\"#comparasion\" aria-label=\"comparasion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparasion</h2>\n<p>Musimy też pamiętać o tym aby zaimplementować mechanizm porównania naszych VO, zrezygnowaliśmy z prymitywnej prezentacji naszego konceptu biznesowego, dlatego musimy opisać proces porównania dwóch VO.</p>\n<h2 id=\"przykład\" style=\"position:relative;\"><a href=\"#przyk%C5%82ad\" aria-label=\"przykład permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Przykład</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from dataclasses import dataclass\nfrom decimal import Decimal\n\n\n@dataclass(frozen=True)\nclass Money:\n    __value: Decimal\n    __currency: str\n\n    @staticmethod\n    def from_int(value: int, currency: str) -> 'Money':\n        return Money(Decimal(value)/100, currency)\n\n    @staticmethod\n    def from_flot(value: float, currency: str) -> 'Money':\n        return Money(Decimal(value), currency)\n\n    def percentage(self, percentage: int) -> 'Money':\n        return Money(Decimal(percentage * self.__value / Decimal(\"100.0\")), self.__currency)\n\n    def to_int(self) -> int:\n        return int(self.__value * 100)\n\n    def to_flot(self) -> float:\n        return float(self.__value)\n\n    def __add__(self, other: 'Money') -> 'Money':\n        if self.__currency == other.__currency:\n            return Money(self.__value + other.__value, self.__currency)\n        raise AttributeError(\"Different currencies\")\n\n    def __sub__(self, other: 'Money') -> 'Money':\n        if self.__currency == other.__currency:\n            return Money(self.__value - other.__value, self.__currency)\n        raise AttributeError(\"Different currencies\")\n\n    def __eq__(self, other: 'Money') -> bool:\n        return self.__value == other.__value and self.__currency == other.__currency\n\n    def __str__(self) -> str:\n        return f\"{self.__value:.2f} {self.__currency}\"</code></pre></div>\n<p>Testy:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from unittest import TestCase\nfrom money import Money\n\n\nclass TestMoney(TestCase):\n\n    def test_can_create_money_from_integer(self):\n        self.assertEqual(\"100.00 USD\", str(Money.from_int(10000, \"USD\")))\n        self.assertEqual(\"0.00 PLN\", str(Money.from_int(0, \"PLN\")))\n        self.assertEqual(\"10.12 EUR\", str(Money.from_int(1012, \"EUR\")))\n\n    def test_should_project_money_to_integer(self):\n        self.assertEqual(10, Money.from_int(10, \"USD\").to_int())\n        self.assertEqual(0, Money.from_int(0, \"USD\").to_int())\n        self.assertEqual(5, Money.from_int(5, \"USD\").to_int())\n\n    def test_should_project_money_to_float(self):\n        self.assertEqual(10.10, Money.from_int(1010, \"USD\").to_flot())\n        self.assertEqual(0.12, Money.from_int(12, \"USD\").to_flot())\n        self.assertEqual(5.11, Money.from_int(511, \"USD\").to_flot())\n\n    def test_can_add_money(self):\n        self.assertEqual(Money.from_int(1000, \"USD\"), Money.from_int(500, \"USD\") + Money.from_int(500, \"USD\"))\n        self.assertEqual(Money.from_int(1042, \"USD\"), Money.from_int(1020, \"USD\") + Money.from_int(22, \"USD\"))\n        self.assertEqual(Money.from_int(0, \"USD\"), Money.from_int(0, \"USD\") + Money.from_int(0, \"USD\"))\n        self.assertEqual(Money.from_int(6, \"USD\"), Money.from_int(4, \"USD\") + Money.from_int(2, \"USD\"))\n\n        self.assertRaises(AttributeError, lambda: Money.from_int(3, \"PLN\") + Money.from_int(2, \"USD\"))\n\n    def test_can_subtract_money(self):\n        self.assertEqual(Money.from_int(0, \"USD\"), Money.from_int(50, \"USD\") - Money.from_int(50, \"USD\"))\n        self.assertEqual(Money.from_int(998, \"USD\"), Money.from_int(1020, \"USD\") - Money.from_int(22, \"USD\"))\n        self.assertEqual(Money.from_int(1, \"USD\"), Money.from_int(3, \"USD\") - Money.from_int(2, \"USD\"))\n\n        self.assertRaises(AttributeError, lambda: Money.from_int(3, \"PLN\") - Money.from_int(2, \"USD\"))\n\n    def test_can_calculate_percentage(self):\n        self.assertEqual(\"30.00 USD\", str(Money.from_int(10000, \"USD\").percentage(30)))\n        self.assertEqual(\"26.40 USD\", str(Money.from_int(8800, \"USD\").percentage(30)))\n        self.assertEqual(\"88.00 USD\", str(Money.from_int(8800, \"USD\").percentage(100)))\n        self.assertEqual(\"0.00 USD\", str(Money.from_int(8800, \"USD\").percentage(0)))\n        self.assertEqual(\"13.20 USD\", str(Money.from_int(4400, \"USD\").percentage(30)))\n        self.assertEqual(\"0.30 USD\", str(Money.from_int(100, \"USD\").percentage(30)))\n        self.assertEqual(\"0.00 USD\", str(Money.from_int(1, \"USD\").percentage(40)))</code></pre></div>","fields":{"slug":"/posts/value-objects-dla-wezy","tagSlugs":["/tag/ddd/","/tag/architecture/","/tag/patterns/"]},"frontmatter":{"date":"2020-06-05T23:08:32.169Z","description":"Zbiór wiedzy o Value Objects oraz przykłady w Pythonie","tags":["DDD","Architecture","Patterns"],"title":"Value Objects dla węży","socialImage":null}}},"pageContext":{"slug":"/posts/value-objects-dla-wezy"}},"staticQueryHashes":["251939775","401334301","825871152"]}