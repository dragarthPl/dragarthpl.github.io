{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/value-objects-dla-wezy","result":{"data":{"markdownRemark":{"id":"c631d222-414e-5d4c-ac20-5d7d920567d4","html":"<ul>\n<li><a href=\"#po-co-mi-w%C5%82a%C5%9Bciwie-te-welju-obd%C5%BCekty\">Po co mi właściwie te welju obdżekty</a></li>\n<li><a href=\"#czym-s%C4%85-value-objects-i-jakie-maj%C4%85-znaczenie-strategiczne\">Czym są Value Objects i jakie mają znaczenie strategiczne</a></li>\n<li><a href=\"#primitive-obsession\">Primitive Obsession</a></li>\n<li><a href=\"#immutable\">Immutable</a></li>\n<li><a href=\"#side-effect\">Side Effect</a></li>\n<li><a href=\"#comparasion\">Comparasion</a></li>\n<li><a href=\"#przyklad\">Przykład</a></li>\n<li><a href=\"#co-mo%C5%BCemy-zyska%C4%87-a-co-straci%C4%87\">Co możemy zyskać, a co stracić</a></li>\n</ul>\n<h2 id=\"po-co-mi-właściwie-te-welju-obdżekty\" style=\"position:relative;\"><a href=\"#po-co-mi-w%C5%82a%C5%9Bciwie-te-welju-obd%C5%BCekty\" aria-label=\"po co mi właściwie te welju obdżekty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Po co mi właściwie te welju obdżekty</h2>\n<p>Te Value Objects to po co nam są potrzebne, tylko więcej się narobię przy nich. W końcu wstawię sobie tutaj inta, dorzucę plusika i mam, a nie będę tworzyć jakieś metody na dodawanie. Po co mi to ? Jeszcze może typ miałbym zadeklarować przy tym dodawaniu ? Na koniec jeszcze zwrócę nowy taki, niezmienialny - przecież to pamięć i cykle procesora zje. To się nie godzi pisać taki niewydajny kod. </p>\n<h2 id=\"czym-są-value-objects-i-jakie-mają-znaczenie-strategiczne\" style=\"position:relative;\"><a href=\"#czym-s%C4%85-value-objects-i-jakie-maj%C4%85-znaczenie-strategiczne\" aria-label=\"czym są value objects i jakie mają znaczenie strategiczne permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Czym są Value Objects i jakie mają znaczenie strategiczne</h2>\n<p>Wyobraź sobie portfel, w którym masz różne banknoty. I tak w środku masz 10 PLN, 5 USD, 13 GBP. Spróbujmy opisać trochę świat portfela w kodzie … to jak to będzie:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1000, 500, 1300</code></pre></div>\n<p>Trochę nawet pasuje, będzie to takie szybkie no i oczywiście sprytne. Lecz czy zastanawiałeś się czy będzie dla innych oczywiste. To może zapomnijmy na chwilę o chwale i fam farach dla wielkiego guru kodu wydajnego kodu. Zrobimy powolny kod, który dołoży kilka taktów procesora w rytmie żółtej kaczy, ale za to też ku chwale innego rodzaju. Chwale wielkich pisarzy niczym <em>Gall Kodim</em>, czy też <em>Gil py Kodenberg</em>, albo <em>Ada Kodinger</em>. Mówiąc, że pieniądz którym płacimy składa się z wartości i waluty uciekamy od innego wymiaru rzeczywistości, która dla przykładu zawiera dowolnie interpretowalny świat stringow, intigerów i floatów. Tak oto odzieramy naszą wyobraźnie z możliwości płacenia -3 PLN, mówimy innym jak to należy dodać albo odjąć - tak by panował ład i porządek. </p>\n<p>Mówiąc w prostym ujęciu o Value Object - mówimy sobie o takim konstrukcie, który wyraża intencję bytu. Ten byt wyposażamy w arsenał innych przyległych mu opisów jego świata, gdzie znajdziemy:</p>\n<ul>\n<li>\n<p>projekcja:</p>\n<ul>\n<li>to_string</li>\n<li>format_sth</li>\n</ul>\n</li>\n<li>z czego mam możliwość to zrobić of(), from_int()</li>\n<li>jak na tym możemy działać add(), increment()</li>\n<li>\n<p>opisujemy granice:</p>\n<ul>\n<li>może być ujemne</li>\n<li>ma limit</li>\n<li>nie może być “takie”</li>\n<li>ma być takie</li>\n</ul>\n</li>\n</ul>\n<p>Czego nie będzie ? Identyfikacji, Value Object opisują mierzalną, wyliczalną lub opisową wartość. I tak pieniądz może być VO, lecz nie zawsze. Jeśli dołożymy do niego numer seryjny już nim nie będzie.</p>\n<h2 id=\"primitive-obsession\" style=\"position:relative;\"><a href=\"#primitive-obsession\" aria-label=\"primitive obsession permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive Obsession</h2>\n<p>Tytułowy code smell, jakim jest primitive obsession to zjawisko nadużywania typów\nprostych do reprezentacji idei/konceptu domeny. Przykłady: używamy liczby całkowitej do reprezentowania kwoty pieniężnej\nzamiast obiektu Money - czyli struktury pieniężnej, albo stringa, aby prezentować wiadomość.</p>\n<h2 id=\"immutable\" style=\"position:relative;\"><a href=\"#immutable\" aria-label=\"immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Immutable</h2>\n<p>Niezmienność jest cechą, która opisuje Value Objects. Ta niezmienność VO, zapewnia nam gwarancje na poziomie kodu, że są\nto obiekty read-only. Jeśli zachodzi potrzeba zmiany wartości wyrażonej za pomocą VO, musimy tego dokonać przez\nutworzenie nowego VO.</p>\n<h2 id=\"side-effect\" style=\"position:relative;\"><a href=\"#side-effect\" aria-label=\"side effect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Side Effect</h2>\n<p>Chodzi o to aby uniknąć zmiany obiektu “na boku” np. po przez money.value = money.value + 3, zamiast tego chcemy mieć\nnowy byt immutable, czyli Money(money.value + 3, currency).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> decimal <span class=\"token keyword\">import</span> Decimal\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">:</span>\n    value<span class=\"token punctuation\">:</span> Decimal\n    currency<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> Decimal<span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span>currency <span class=\"token operator\">=</span> currency\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">:</span> Money<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">'Money'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>currency <span class=\"token operator\">==</span> money<span class=\"token punctuation\">.</span>currency\n            <span class=\"token keyword\">return</span> Money<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> money<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">.</span>currency<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Different currency\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Czemu to takie ważne ? Przypuśćmy że mamy taka sytuację:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>> money = Money(Decimal(\"5\"), \"PLN\")\n\n>>> currency_conversion(money, \"USD\")\n7 USD\n\n>>> money.value\n7\n\n>>> money.currency\nUSD</code></pre></div>\n<p>Przykład pokazuje idealnie jak błędy w currency_conversion, są siane w głąb naszego kodu.</p>\n<h2 id=\"comparasion\" style=\"position:relative;\"><a href=\"#comparasion\" aria-label=\"comparasion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparasion</h2>\n<p>Musimy też pamiętać o tym aby zaimplementować mechanizm porównania naszych VO, zrezygnowaliśmy z prymitywnej prezentacji\nnaszego konceptu biznesowego, dlatego musimy opisać proces porównania dwóch VO.</p>\n<h2 id=\"przykład\" style=\"position:relative;\"><a href=\"#przyk%C5%82ad\" aria-label=\"przykład permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Przykład</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> dataclasses <span class=\"token keyword\">import</span> dataclass\n<span class=\"token keyword\">from</span> decimal <span class=\"token keyword\">import</span> Decimal\n\n\n<span class=\"token decorator annotation punctuation\">@dataclass</span><span class=\"token punctuation\">(</span>frozen<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">:</span>\n    __value<span class=\"token punctuation\">:</span> Decimal\n    __currency<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">from_int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">'Money'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> Money<span class=\"token punctuation\">(</span>Decimal<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">from_float</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">'Money'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> Money<span class=\"token punctuation\">(</span>Decimal<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">percentage</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> percentage<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">'Money'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> Money<span class=\"token punctuation\">(</span>Decimal<span class=\"token punctuation\">(</span>percentage <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>__value <span class=\"token operator\">/</span> Decimal<span class=\"token punctuation\">(</span><span class=\"token string\">\"100.0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>__currency<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">to_int</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>__value <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">to_float</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>__value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token string\">'Money'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">'Money'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>__currency <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>__currency<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> Money<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>__value <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>__value<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>__currency<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span> AttributeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Different currencies\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token string\">'Money'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">'Money'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>__currency <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>__currency<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> Money<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>__value <span class=\"token operator\">-</span> other<span class=\"token punctuation\">.</span>__value<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>__currency<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span> AttributeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Different currencies\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token string\">'Money'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__value <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>__value <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>__currency <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>__currency\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>__value<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>__currency<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span></code></pre></div>\n<p>Testy:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> unittest <span class=\"token keyword\">import</span> TestCase\n<span class=\"token keyword\">from</span> money <span class=\"token keyword\">import</span> Money\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMoney</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_can_create_money_from_integer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"100.00 USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"0.00 PLN\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PLN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"10.12 EUR\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">1012</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"EUR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_should_project_money_to_integer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_int<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_int<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_int<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_should_project_money_to_float</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">10.10</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">1010</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_float<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">0.12</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_float<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">5.11</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">511</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_float<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_can_add_money</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">1042</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">1020</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>AttributeError<span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PLN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_can_subtract_money</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">998</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">1020</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>AttributeError<span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PLN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_can_calculate_percentage</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"30.00 USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>percentage<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"26.40 USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">8800</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>percentage<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"88.00 USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">8800</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>percentage<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"0.00 USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">8800</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>percentage<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"13.20 USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">4400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>percentage<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"0.30 USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>percentage<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"0.00 USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Money<span class=\"token punctuation\">.</span>from_int<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>percentage<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"co-możemy-zyskać-a-co-stracić\" style=\"position:relative;\"><a href=\"#co-mo%C5%BCemy-zyska%C4%87-a-co-straci%C4%87\" aria-label=\"co możemy zyskać a co stracić permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Co możemy zyskać, a co stracić</h2>\n<p>Zyski:</p>\n<ul>\n<li>przejrzyste reguły gry</li>\n<li>odchudzenie utilsów i przyporządkowanie właściwych formaterów do odpowiednich VO</li>\n<li>wysoka enkapsulacja</li>\n<li>testowalność na poziomie unit testów</li>\n<li>mniej kodu przy reużywalności</li>\n<li>wyższa czytelność</li>\n</ul>\n<p>Straty:</p>\n<ul>\n<li>wydajność</li>\n<li>trzeba się bardziej namęczyć aby go napisać - czas implementacji</li>\n</ul>","fields":{"slug":"/posts/value-objects-dla-wezy","tagSlugs":["/tag/ddd/","/tag/architecture/","/tag/patterns/"]},"frontmatter":{"date":"2022-03-18T22:00:00.169Z","description":"Zbiór wiedzy o Value Objects oraz przykłady w Pythonie","tags":["DDD","Architecture","Patterns"],"title":"Value Objects dla węży","socialImage":null}}},"pageContext":{"slug":"/posts/value-objects-dla-wezy"}},"staticQueryHashes":["251939775","401334301","825871152"]}